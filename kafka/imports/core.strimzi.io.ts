// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema StrimziPodSet
 */
export class StrimziPodSet extends ApiObject {
  /**
   * Returns the apiVersion and kind for "StrimziPodSet"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.strimzi.io/v1beta2',
    kind: 'StrimziPodSet',
  }

  /**
   * Renders a Kubernetes manifest for "StrimziPodSet".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: StrimziPodSetProps = {}): any {
    return {
      ...StrimziPodSet.GVK,
      ...toJson_StrimziPodSetProps(props),
    };
  }

  /**
   * Defines a "StrimziPodSet" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: StrimziPodSetProps = {}) {
    super(scope, id, {
      ...StrimziPodSet.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...StrimziPodSet.GVK,
      ...toJson_StrimziPodSetProps(resolved),
    };
  }
}

/**
 * @schema StrimziPodSet
 */
export interface StrimziPodSetProps {
  /**
   * @schema StrimziPodSet#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * The specification of the StrimziPodSet.
   *
   * @schema StrimziPodSet#spec
   */
  readonly spec?: StrimziPodSetSpec;

}

/**
 * Converts an object of type 'StrimziPodSetProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StrimziPodSetProps(obj: StrimziPodSetProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_StrimziPodSetSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The specification of the StrimziPodSet.
 *
 * @schema StrimziPodSetSpec
 */
export interface StrimziPodSetSpec {
  /**
   * Selector is a label query which matches all the pods managed by this `StrimziPodSet`. Only `matchLabels` is supported. If `matchExpressions` is set, it will be ignored.
   *
   * @schema StrimziPodSetSpec#selector
   */
  readonly selector: StrimziPodSetSpecSelector;

  /**
   * The Pods managed by this StrimziPodSet.
   *
   * @schema StrimziPodSetSpec#pods
   */
  readonly pods: any[];

}

/**
 * Converts an object of type 'StrimziPodSetSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StrimziPodSetSpec(obj: StrimziPodSetSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'selector': toJson_StrimziPodSetSpecSelector(obj.selector),
    'pods': obj.pods?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector is a label query which matches all the pods managed by this `StrimziPodSet`. Only `matchLabels` is supported. If `matchExpressions` is set, it will be ignored.
 *
 * @schema StrimziPodSetSpecSelector
 */
export interface StrimziPodSetSpecSelector {
  /**
   * @schema StrimziPodSetSpecSelector#matchExpressions
   */
  readonly matchExpressions?: StrimziPodSetSpecSelectorMatchExpressions[];

  /**
   * @schema StrimziPodSetSpecSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * Converts an object of type 'StrimziPodSetSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StrimziPodSetSpecSelector(obj: StrimziPodSetSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_StrimziPodSetSpecSelectorMatchExpressions(y)),
    'matchLabels': obj.matchLabels,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StrimziPodSetSpecSelectorMatchExpressions
 */
export interface StrimziPodSetSpecSelectorMatchExpressions {
  /**
   * @schema StrimziPodSetSpecSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema StrimziPodSetSpecSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema StrimziPodSetSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'StrimziPodSetSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StrimziPodSetSpecSelectorMatchExpressions(obj: StrimziPodSetSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

