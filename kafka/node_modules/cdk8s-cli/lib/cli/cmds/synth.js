"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = __importStar(require("os"));
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs-extra"));
const semver = __importStar(require("semver"));
const sscaff_1 = require("sscaff");
const yaml = __importStar(require("yaml"));
const config_1 = require("../../config");
const dispatch_1 = require("../../import/dispatch");
const _manager_1 = require("../../plugins/_manager");
const util_1 = require("../../util");
const CHART_YAML_FILE = 'Chart.yaml';
const README = 'README.md';
const DEFAULT_OUTPUT_DIR = 'dist';
const DEFAULT_PLUGINS_DIR = path_1.default.join(os.homedir(), '.cdk8s', 'plugins');
const config = (0, config_1.readConfigSync)();
class Command {
    constructor() {
        this.command = 'synth';
        this.describe = 'Synthesizes Kubernetes manifests for all charts in your app.';
        this.aliases = ['synthesize'];
        this.builder = (args) => args
            .option('app', { required: true, default: config === null || config === void 0 ? void 0 : config.app, desc: 'Command to use in order to execute cdk8s app', alias: 'a' })
            .option('output', { required: false, desc: 'Output directory', alias: 'o' })
            .option('stdout', { type: 'boolean', required: false, desc: 'Write synthesized manifests to STDOUT instead of the output directory', alias: 'p' })
            .option('plugins-dir', { required: false, desc: 'Directory to store cdk8s plugins.' })
            .option('validate', { type: 'boolean', required: false, desc: 'Apply validation plugins on the resulting manifests (use --no-validate to disable)' })
            .option('validation-reports-output-file', { required: false, desc: 'File to write a JSON representation of the validation reports to' })
            .option('format', { required: false, desc: 'Synthesis format for Kubernetes manifests. The default synthesis format is plain kubernetes manifests.', type: 'string' })
            .option('chart-api-version', { required: false, desc: 'Chart API version of helm chart. The default value would be \'v2\' api version when synthesis format is helm. There is no default set when synthesis format is plain.', type: 'string' })
            .option('chart-version', { required: false, desc: 'Chart version of helm chart. This is required if synthesis format is helm.' });
    }
    async handler(argv) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const command = argv.app;
        const stdout = argv.stdout;
        const outdir = (_b = (_a = argv.output) !== null && _a !== void 0 ? _a : config === null || config === void 0 ? void 0 : config.output) !== null && _b !== void 0 ? _b : (!stdout ? DEFAULT_OUTPUT_DIR : undefined);
        const validate = (_c = argv.validate) !== null && _c !== void 0 ? _c : true;
        const reportFile = argv.validationReportsOutputFile;
        const pluginsDir = (_e = (_d = argv.pluginsDir) !== null && _d !== void 0 ? _d : config === null || config === void 0 ? void 0 : config.pluginsDirectory) !== null && _e !== void 0 ? _e : DEFAULT_PLUGINS_DIR;
        const format = (_h = (_f = argv.format) !== null && _f !== void 0 ? _f : (_g = config === null || config === void 0 ? void 0 : config.synthConfig) === null || _g === void 0 ? void 0 : _g.format) !== null && _h !== void 0 ? _h : config_1.SynthesisFormat.PLAIN;
        const chartVersion = (_j = argv.chartVersion) !== null && _j !== void 0 ? _j : (_k = config === null || config === void 0 ? void 0 : config.synthConfig) === null || _k === void 0 ? void 0 : _k.chartVersion;
        const chartApiVersion = (_o = (_l = argv.chartApiVersion) !== null && _l !== void 0 ? _l : (_m = config === null || config === void 0 ? void 0 : config.synthConfig) === null || _m === void 0 ? void 0 : _m.chartApiVersion) !== null && _o !== void 0 ? _o : getDefaultChartApiVersion(format);
        if (outdir && outdir !== (config === null || config === void 0 ? void 0 : config.output) && stdout) {
            throw new Error('\'--output\' and \'--stdout\' are mutually exclusive. Please only use one.');
        }
        if (outdir) {
            fs.rmSync(outdir, { recursive: true, force: true });
        }
        if (format != config_1.SynthesisFormat.PLAIN && format != config_1.SynthesisFormat.HELM) {
            throw new Error(`You need to specify synthesis format either as ${config_1.SynthesisFormat.PLAIN} or ${config_1.SynthesisFormat.HELM} but received: ${format}`);
        }
        if (chartApiVersion && (chartApiVersion != config_1.HelmChartApiVersion.V1 && chartApiVersion != config_1.HelmChartApiVersion.V2)) {
            throw new Error(`You need to specify helm chart api version either as ${config_1.HelmChartApiVersion.V1} or ${config_1.HelmChartApiVersion.V2} but received: ${chartApiVersion}`);
        }
        if (format === config_1.SynthesisFormat.HELM && !chartVersion) {
            throw new Error('You need to specify \'--chart-version\' when \'--format\' is set as \'helm\'.');
        }
        if (chartVersion && !semver.valid(chartVersion)) {
            throw new Error(`The value specified for '--chart-version': ${chartVersion} does not follow SemVer-2(https://semver.org/).`);
        }
        if (stdout && format === config_1.SynthesisFormat.HELM) {
            throw new Error('Helm format synthesis does not support \'stdout\'. Please use \'outdir\' instead.');
        }
        if (format === config_1.SynthesisFormat.PLAIN && chartApiVersion) {
            throw new Error('You need to specify \'--format\' as \'helm\' when \'--chart-api-version\' is set.');
        }
        if (format === config_1.SynthesisFormat.PLAIN && chartVersion) {
            throw new Error('You need to specify \'--format\' as \'helm\' when \'--chart-version\' is set.');
        }
        if (chartApiVersion === config_1.HelmChartApiVersion.V1 && (0, util_1.crdsArePresent)(config === null || config === void 0 ? void 0 : config.imports)) {
            throw new Error(`Your application uses CRDs, which are not supported when '--chart-api-version' is set to ${config_1.HelmChartApiVersion.V1}. Please either set '--chart-api-version' to ${config_1.HelmChartApiVersion.V2}, or remove the CRDs from your cdk8s.yaml configuration file`);
        }
        const validations = validate ? await fetchValidations() : undefined;
        const recordConstructMetadata = !(validations == undefined || validations.length == 0);
        if (stdout) {
            await (0, util_1.mkdtemp)(async (tempDir) => {
                const app = await (0, util_1.synthApp)(command, tempDir, stdout, recordConstructMetadata);
                for (const f of app.manifests) {
                    fs.createReadStream(f).pipe(process.stdout);
                }
                if (validations) {
                    const pluginManager = new _manager_1.PluginManager(pluginsDir);
                    await (0, util_1.validateApp)(app, stdout, validations, pluginManager, reportFile);
                }
            });
        }
        else {
            let manifests;
            if (format === config_1.SynthesisFormat.HELM) {
                await createHelmScaffolding(chartApiVersion, chartVersion, outdir);
                const templateDir = path_1.default.join(outdir, 'templates');
                manifests = await (0, util_1.synthApp)(command, templateDir, stdout, recordConstructMetadata);
            }
            else {
                manifests = await (0, util_1.synthApp)(command, outdir, stdout, recordConstructMetadata);
            }
            if (validations) {
                const pluginManager = new _manager_1.PluginManager(pluginsDir);
                await (0, util_1.validateApp)(manifests, stdout, validations, pluginManager, reportFile);
            }
        }
    }
}
async function fetchValidations() {
    if (typeof (config === null || config === void 0 ? void 0 : config.validations) === 'string') {
        const content = await (0, util_1.download)(config.validations);
        return yaml.parse(content);
    }
    else {
        return config === null || config === void 0 ? void 0 : config.validations;
    }
}
async function createHelmScaffolding(apiVersion, chartVersion, outdir) {
    const tempHelmStructure = createFolderStructure();
    const substituteValues = {
        apiVersion: apiVersion,
        version: chartVersion,
        app: path_1.default.basename(path_1.default.resolve()),
    };
    try {
        await (0, sscaff_1.sscaff)(tempHelmStructure, outdir, substituteValues);
    }
    finally {
        fs.rmSync(tempHelmStructure, { recursive: true });
    }
    if (apiVersion === config_1.HelmChartApiVersion.V2 && (0, util_1.crdsArePresent)(config === null || config === void 0 ? void 0 : config.imports)) {
        await addCrdsToHelmChart(outdir);
    }
    function createFolderStructure() {
        const root = fs.mkdtempSync(path_1.default.join(os.tmpdir(), 'helm-scaffolding-'));
        fs.mkdirSync(path_1.default.join(root, 'templates'));
        const chartYamlFile = {
            apiVersion: '{{ apiVersion }}',
            name: '{{ app }}',
            version: '{{ version }}',
            description: 'Generated chart for {{ app }}',
            type: 'application',
        };
        fs.outputFileSync(path_1.default.join(root, CHART_YAML_FILE), yaml.stringify(chartYamlFile));
        const readmeFile = 'This Helm chart is generated using cdk8s. Any manual changes to the chart would be discarded once cdk8s app is synthesized again with `--format helm`.';
        fs.outputFileSync(path_1.default.join(root, README), readmeFile);
        return root;
    }
}
async function addCrdsToHelmChart(chartDir) {
    var _a;
    const crds = ((_a = config === null || config === void 0 ? void 0 : config.imports) !== null && _a !== void 0 ? _a : []).filter((imprt) => (!(0, util_1.isK8sImport)(imprt) && !(0, util_1.isHelmImport)(imprt)));
    for (const crd of crds) {
        const importSpec = (0, util_1.parseImports)(crd);
        const importedCrdDef = await (0, dispatch_1.matchImporter)(importSpec, process.argv);
        const manifest = importedCrdDef.rawManifest;
        const filename = (0, util_1.deriveFileName)(importSpec.source);
        fs.outputFileSync(path_1.default.join(chartDir, 'crds', `${filename}.yaml`), manifest);
    }
}
function getDefaultChartApiVersion(synthFormat) {
    return (synthFormat === config_1.SynthesisFormat.HELM) ? config_1.HelmChartApiVersion.V2 : undefined;
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,